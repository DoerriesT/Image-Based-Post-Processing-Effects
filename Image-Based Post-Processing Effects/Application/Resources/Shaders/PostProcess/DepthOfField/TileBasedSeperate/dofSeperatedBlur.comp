#version 450 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba16f, binding = 0) uniform writeonly image2D uImgOutA;
layout(rgba16f, binding = 1) uniform writeonly image2D uImgOutB;

layout(binding = 0) uniform sampler2D uColorTexture;
layout(binding = 1) uniform sampler2D uCocTexture;
layout(binding = 2) uniform sampler2D uCocTileNeighborMaxTexture;

uniform vec2 uSampleCoords[7 * 7];

void main()
{	
	vec2 domainSize = textureSize(uColorTexture, 0).xy;
	vec2 texelSize = vec2(1.0 / domainSize);
	vec2 centerCoord = vec2(gl_GlobalInvocationID.xy + 0.5) * texelSize;
	
	vec2 centerCoc = texture(uCocTexture, centerCoord).xy;

    float centerCocNear = centerCoc.x;
	float centerCocFar = centerCoc.y;
	
	vec2 tileMaxCoc = texture(uCocTileNeighborMaxTexture, centerCoord).xy;
	
	vec3 sumNear = vec3(0.0);
	float weightNear = 0.0;
	vec3 sumFar = vec3(0.0);
	float weightFar = 0.0;
 
    for (int i = 0; i < 7 * 7; ++i)
    {
		vec2 kernelSampleCoord = uSampleCoords[i];
		// near field
		{
			vec2 sampleCoordTexels = vec2(gl_GlobalInvocationID.xy + tileMaxCoc.x * kernelSampleCoord);
			vec2 sampleCoord = vec2(sampleCoordTexels + 0.5) * texelSize;
			vec3 sampleColor = texture(uColorTexture, sampleCoord).rgb;
			float sampleCoc = texture(uCocTexture, sampleCoord).x;
			float sampleWeight = float(sampleCoc >= distance(gl_GlobalInvocationID.xy, sampleCoordTexels));
	
			sumNear += sampleColor * sampleWeight;
			weightNear += sampleWeight;
		}
		// far field
		{
			vec2 sampleCoordTexels = vec2(gl_GlobalInvocationID.xy + tileMaxCoc.y * kernelSampleCoord);
			vec2 sampleCoord = vec2(sampleCoordTexels + 0.5) * texelSize;
			vec3 sampleColor = texture(uColorTexture, sampleCoord).rgb;
			float sampleCoc = texture(uCocTexture, sampleCoord).y;
			float sampleWeight = float(sampleCoc >= distance(gl_GlobalInvocationID.xy, sampleCoordTexels));
	
			sumFar += sampleColor * sampleWeight;
			weightFar += sampleWeight;
		}
    }
 
	vec3 centerColor = texture(uColorTexture, centerCoord).rgb;
    sumNear = weightNear > 0.0 ? sumNear / weightNear : centerColor;
	sumFar = weightFar > 0.0 ? sumFar / weightFar : centerColor;
	
	imageStore(uImgOutA, ivec2(gl_GlobalInvocationID.xy), vec4(sumNear, 1.0));
	imageStore(uImgOutB, ivec2(gl_GlobalInvocationID.xy), vec4(sumFar, 1.0));
}