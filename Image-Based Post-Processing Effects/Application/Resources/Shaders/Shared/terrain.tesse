#version 450 core

layout(quads, fractional_even_spacing, cw) in;

in vec3 tcPosition[];
out vec2 vTexCoord;
out vec3 vWorldPos;

layout(binding = 1) uniform sampler2D uDisplacementTexture;
layout(binding = 2) uniform sampler2D uPerlinNoiseTexture;

uniform mat4 uViewProjection;
uniform float uTexCoordScale = 1.0;
uniform float uDisplacementScale = 1.0;
uniform vec3 uPerlinOctave = vec3(1.12, 0.23, 0.59);
uniform vec2 uPerlinMovement;
uniform vec3 uPerlinAmplitude = vec3(0.35, 0.57, 0.42);
uniform vec3 uCamPos;

const float NOISE_START = 30.0;
const float NOISE_END = 400.0;

// A very simple, regular procedural terrain for debugging cracks etc.
float debugSineHills(vec2 uv)
{
	const float HORIZ_SCALE = 4 * 3.14159, VERT_SCALE = 1;
	uv *= HORIZ_SCALE;
	return VERT_SCALE * (sin(uv.x) + 1) * (sin(uv.y) + 1) - 0.5;
}

void main()
{
    vec3 position = vec3(0.0f);

	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;
	
	vec3 a = mix(tcPosition[0], tcPosition[1], u);
	
	vec3 b = mix(tcPosition[3], tcPosition[2], u);
	
	position = mix(a, b, v);
	
	vTexCoord = position.xz * uTexCoordScale;
	
	vec3 displacement = texture(uDisplacementTexture, vTexCoord).xyz;

	float perlin0 = texture(uPerlinNoiseTexture, vTexCoord * uPerlinOctave.x + uPerlinMovement).w;
	float perlin1 = texture(uPerlinNoiseTexture, vTexCoord * uPerlinOctave.y + uPerlinMovement).w;
	float perlin2 = texture(uPerlinNoiseTexture, vTexCoord * uPerlinOctave.z + uPerlinMovement).w;
	
	float perlin = perlin0 * uPerlinAmplitude.x + perlin1 * uPerlinAmplitude.y + perlin2 * uPerlinAmplitude.z;

	float noiseBlendFactor = (distance(position.xz, uCamPos.xz) - NOISE_START) / (NOISE_END - NOISE_START);

	displacement = mix(displacement, vec3(0.0, perlin, 0.0), clamp(noiseBlendFactor, 0.0, 1.0));
	
	position += displacement * uDisplacementScale;
	
	//position.y += debugSineHills(vTexCoord);
	
	vWorldPos = position;
	
    gl_Position = uViewProjection * vec4(position, 1.0);
}