#version 450 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(r11f_g11f_b10f, binding = 0) uniform writeonly image2D uImgOut;

layout(binding = 0) uniform samplerCube uEnvironmentMap;

const float PI = 3.14159265359;

uniform vec2 uImageSize = vec2(64.0);

vec2 signNotZero(vec2 v) 
{
	return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);
}

/** Returns a unit vector. Argument o is an octahedral vector packed via octEncode,
    on the [-1, +1] square*/
vec3 octDecode(vec2 o) 
{
    vec3 v = vec3(o.x, o.y, 1.0 - abs(o.x) - abs(o.y));
    if (v.z < 0.0) 
	{
        v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);
    }
    return normalize(v);
}

void main()
{		
	vec2 texelSize = vec2(1.0 / uImageSize);
	vec2 centerCoord = vec2(vec2(gl_GlobalInvocationID.xy) + 0.5) * texelSize;

    vec3 N = octDecode(centerCoord * 2.0 - 1.0);

    vec3 irradiance = vec3(0.0);   
    
    // tangent space calculation from origin point
    vec3 up    = vec3(0.0, 1.0, 0.0);
    vec3 right = cross(up, N);
    up = cross(N, right);
	mat3 TBN = mat3(right, up, N);
       
    float sampleDelta = 0.025;
    float samples = 0.0;
    for(float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        for(float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            // spherical to cartesian (in tangent space)
            vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            vec3 sampleVec = TBN * tangentSample; 

            irradiance += texture(uEnvironmentMap, sampleVec).rgb * cos(theta) * sin(theta);
            ++samples;
        }
    }
    irradiance = PI * irradiance * (1.0 / samples);
    
	imageStore(uImgOut, ivec2(gl_GlobalInvocationID.xy), vec4(irradiance, 1.0));
}

