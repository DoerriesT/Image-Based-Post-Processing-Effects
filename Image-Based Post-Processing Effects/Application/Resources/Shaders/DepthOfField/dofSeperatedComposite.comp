#version 450 core

layout(local_size_x = 8, local_size_y = 8, local_size_z= 1) in;

layout(rgba16f, binding = 0) uniform writeonly image2D uImgOut;

layout(binding = 0) uniform sampler2D uColorTexture;
layout(binding = 1) uniform sampler2D uCocTexture;
layout(binding = 2) uniform sampler2D uNearTexture;
layout(binding = 3) uniform sampler2D uFarTexture;

float w0(float a)
{
	return (1.0/6.0)*(a*(a*(-a + 3.0) - 3.0) + 1.0);
}

float w1(float a)
{
	return (1.0/6.0)*(a*a*(3.0*a - 6.0) + 4.0);
}

float w2(float a)
{
	return (1.0/6.0)*(a*(a*(-3.0*a + 3.0) + 3.0) + 1.0);
}

float w3(float a)
{
	return (1.0/6.0)*(a*a*a);
}

// g0 and g1 are the two amplitude functions
float g0(float a)
{
	return w0(a) + w1(a);
}

float g1(float a)
{
	return w2(a) + w3(a);
}

// h0 and h1 are the two offset functions
float h0(float a)
{
	return -1.0 + w1(a) / (w0(a) + w1(a));
}

float h1(float a)
{
	return 1.0 + w3(a) / (w2(a) + w3(a));
}

vec4 textureBicubic(sampler2D tex, vec2 uv, vec2 res)
{
	uv = uv * res + 0.5;
	vec2 iuv = floor(uv);
	vec2 fuv = fract(uv);

	float g0x = g0(fuv.x);
	float g1x = g1(fuv.x);
	float h0x = h0(fuv.x);
	float h1x = h1(fuv.x);
	float h0y = h0(fuv.y);
	float h1y = h1(fuv.y);

	vec2 p0 = (vec2(iuv.x + h0x, iuv.y + h0y) - 0.5) / res;
	vec2 p1 = (vec2(iuv.x + h1x, iuv.y + h0y) - 0.5) / res;
	vec2 p2 = (vec2(iuv.x + h0x, iuv.y + h1y) - 0.5) / res;
	vec2 p3 = (vec2(iuv.x + h1x, iuv.y + h1y) - 0.5) / res;

	return g0(fuv.y) * (g0x * texture(tex, p0) + g1x * texture(tex, p1)) + g1(fuv.y) * (g0x * texture(tex, p2) + g1x * texture(tex, p3));
}

void main()
{	
	vec2 domainSize = textureSize(uColorTexture, 0).xy;
	vec2 texelSize = vec2(1.0 / domainSize);
	vec2 texCoord = vec2(vec2(gl_GlobalInvocationID.xy) + 0.5) * texelSize;
	
    vec4 dofNear = textureBicubic(uNearTexture, texCoord, domainSize * 0.5);
	vec4 dofFar = textureBicubic(uFarTexture, texCoord, domainSize * 0.5);
	vec3 color = texture(uColorTexture, texCoord).rgb;
	vec2 coc = texture(uCocTexture, texCoord).xy;

	dofNear.rgb = dofNear.rgb / (dofNear.a > 0.0 ? dofNear.a : 1.0);
	dofNear.a = clamp(dofNear.a, 0.0, 1.0);

	dofFar.rgb = dofFar.rgb / (dofFar.a > 0.0 ? dofFar.a : 1.0);
	dofFar.a = clamp(dofFar.a, 0.0, 1.0);
	
	color = mix(color, dofFar.rgb, dofFar.a);
	color = mix(color, dofNear.rgb, dofNear.a);
	
	imageStore(uImgOut, ivec2(gl_GlobalInvocationID.xy), vec4(color.rgb, 1.0));
}