#version 450 core

#ifndef SAMPLE_COUNT
#define SAMPLE_COUNT (3 * 3)
#endif // SAMPLE_COUNT

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba16f, binding = 0) uniform writeonly image2D uNearField;
layout(rgba16f, binding = 1) uniform writeonly image2D uFarField;

layout(binding = 0) uniform sampler2D uCocTexture;
layout(binding = 1) uniform sampler2D uCocTileNeighborMaxTexture;
layout(binding = 4) uniform sampler2D uNearColorTexture;
layout(binding = 5) uniform sampler2D uFarColorTexture;

uniform vec2 uSampleCoords[SAMPLE_COUNT];

void main()
{	
	vec2 domainSize = textureSize(uNearColorTexture, 0).xy;
	vec2 texelSize = vec2(1.0 / domainSize);
	vec2 centerCoord = vec2(vec2(gl_GlobalInvocationID.xy) + 0.5) * texelSize;

	float farCoc = texture(uFarColorTexture, centerCoord).w;
	
    vec4 maxValNear = vec4(0.0);
    vec4 maxValFar = vec4(0.0, 0.0, 0.0, farCoc);
	
	vec2 tileMaxCoc =  texture(uCocTileNeighborMaxTexture, centerCoord).xy * 0.5;
	tileMaxCoc *= 0.15;
	
    for (int i = 0; i < SAMPLE_COUNT; ++i)
    {
		vec2 kernelSampleCoord = uSampleCoords[i];
		// near field
		if (tileMaxCoc.x > 0.0)
		{
			vec2 offset = tileMaxCoc.x * kernelSampleCoord * texelSize;
			vec4 tap = texture(uNearColorTexture, centerCoord + offset);
	    
			maxValNear = max(tap, maxValNear);
		}
        
		// far field
		{
			vec2 offset = farCoc * kernelSampleCoord * texelSize;
			vec4 tap = texture(uFarColorTexture, centerCoord + offset);
	    
			maxValFar = max(tap, maxValFar);
		}
    }
	
	imageStore(uNearField, ivec2(gl_GlobalInvocationID.xy), maxValNear);
	imageStore(uFarField, ivec2(gl_GlobalInvocationID.xy), maxValFar);
}