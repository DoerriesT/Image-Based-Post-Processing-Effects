#version 450 core

#ifndef SAMPLE_COUNT
#define SAMPLE_COUNT (7 * 7)
#endif // SAMPLE_COUNT

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(rgba16f, binding = 0) uniform writeonly image2D uNearField;
layout(rgba16f, binding = 1) uniform writeonly image2D uFarField;

layout(binding = 0) uniform sampler2D uCocTexture;
layout(binding = 1) uniform sampler2D uCocTileNeighborMaxTexture;
layout(binding = 2) uniform sampler2D uNearColorTexture;
layout(binding = 3) uniform sampler2D uFarColorTexture;

uniform vec2 uSampleCoords[SAMPLE_COUNT];

void main()
{	
	vec2 domainSize = textureSize(uNearColorTexture, 0).xy;
	vec2 texelSize = vec2(1.0 / domainSize);
	vec2 centerCoord = vec2(vec2(gl_GlobalInvocationID.xy) + 0.5) * texelSize;
	
	vec4 centerNear = texture(uNearColorTexture, centerCoord);
	vec4 centerFar = texture(uFarColorTexture, centerCoord);
	
	vec2 tileMaxCoc = texture(uCocTileNeighborMaxTexture, centerCoord).xy * 0.5;
	
	vec4 sumNear = vec4(0.0);
	float weightNear = 0.0;
	vec4 sumFar = vec4(0.0);
	float weightFar = 0.0;
 
    for (int i = 0; i < SAMPLE_COUNT; ++i)
    {
		vec2 kernelSampleCoord = uSampleCoords[i];
		// near field
		if (tileMaxCoc.x > 0.0)
		{
			vec2 offset = tileMaxCoc.x * kernelSampleCoord * texelSize;
			vec4 tap = texture(uNearColorTexture, centerCoord + offset);

			float k = 1.075;
			float sampleWeight = (tap.w >= tileMaxCoc.x * k) ? 1.0 : clamp(tileMaxCoc.x * k - tap.w, 0.0, 1.0);
	
			sumNear += tap * sampleWeight;
			weightNear += sampleWeight;
		}
		// far field
		{
			vec2 offset = centerFar.w * kernelSampleCoord * texelSize;
			vec4 tap = texture(uFarColorTexture, centerCoord + offset);

			float sampleWeight = (tap.w >= centerFar.w) ? 1.0 : clamp(tap.w, 0.0, 1.0);
	
			sumFar += tap * sampleWeight;
			weightFar += sampleWeight;
		}
    }
 
    sumNear = weightNear > 0.0 ? sumNear / weightNear : centerNear;
	sumFar = weightFar > 0.0 ? sumFar / weightFar : centerFar;

	imageStore(uNearField, ivec2(gl_GlobalInvocationID.xy), sumNear);
	imageStore(uFarField, ivec2(gl_GlobalInvocationID.xy), sumFar);
}