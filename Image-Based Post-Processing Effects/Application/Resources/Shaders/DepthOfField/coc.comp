#version 450 core

layout(local_size_x = 8, local_size_y = 8, local_size_z= 1) in;

layout(rg16f, binding = 0) uniform image2D uImgOut;

layout(binding = 0) uniform sampler2D uDepthTexture;

uniform float uFocalLength;
uniform float uApertureSize;
uniform vec2 uNearFar;
uniform float uScale = 4.0;

float linearDepth(float depth)
{
    float z_n = 2.0 * depth - 1.0;
    return 2.0 * uNearFar.x * uNearFar.y / (uNearFar.y + uNearFar.x - z_n * (uNearFar.y - uNearFar.x));
}

void main()
{	
	float depth = linearDepth(texelFetch(uDepthTexture, ivec2(gl_GlobalInvocationID.xy), 0).x);
	float centerDepth = linearDepth(texture(uDepthTexture, vec2(0.5)).x);

	float nominator = uFocalLength * (centerDepth - depth);
	float denominator = depth * (centerDepth - uFocalLength);
	float coc = uApertureSize * (nominator / denominator);

	vec2 resolution = textureSize(uDepthTexture, 0).xy;
	coc *= max(resolution.x * (1.0 / 1920), resolution.y * (1.0 / 1080)) * uScale;
	
	vec4 cocData = vec4(abs(step(coc, 0.0) * coc), abs(step(0.0, coc) * coc), 0.0, 0.0);
	
	imageStore(uImgOut, ivec2(gl_GlobalInvocationID.xy), min(cocData, vec4(40.0)));
}